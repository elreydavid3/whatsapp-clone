{"version":3,"sources":["firebase.js","SidebarChat.js","StateProvider.js","Sidebar.js","Chat.js","reducer.js","Login.js","App.js","serviceWorker.js","index.js"],"names":["db","firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","firestore","auth","provider","GoogleAuthProvider","SidebarChat","addNewChat","id","name","useState","seed","setSeed","messages","setMessages","useEffect","collection","doc","orderBy","onSnapshot","snapshot","docs","map","data","Math","floor","random","onClick","roomName","prompt","add","className","to","Avatar","src","message","StateContext","createContext","StateProvider","reducer","initialState","children","Provider","value","useReducer","useStateValue","useContext","Sidebar","rooms","setRooms","user","unsubscribe","photoURL","IconButton","SearchOutlined","placeholder","type","room","key","Chat","input","setInput","roomId","useParams","setRoomName","Date","length","timestamp","toDate","toUTCString","displayName","InsertEmoticon","onChange","e","target","preventDefault","console","log","FieldValue","serverTimestamp","actionTypes","state","action","Login","dispatch","alt","Button","signInWithPopup","then","result","catch","error","alert","App","path","exact","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","uid","togglerState","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"ucAcMA,EADcC,IAASC,cAXN,CACrBC,OAAQ,0CACRC,WAAY,uCACZC,YAAa,8CACbC,UAAW,uBACXC,cAAe,mCACfC,kBAAmB,eACnBC,MAAO,4CACPC,cAAe,iBAIMC,YACjBC,EAAOX,IAASW,OAChBC,EAAW,IAAIZ,IAASW,KAAKE,mBAGpBd,I,QCgCAe,MA7Cf,YAAgD,IAAD,EAAxBC,EAAwB,EAAxBA,WAAYC,EAAY,EAAZA,GAAIC,EAAQ,EAARA,KAAQ,EACrBC,mBAAS,IADY,mBACtCC,EADsC,KAChCC,EADgC,OAEbF,mBAAS,IAFI,mBAEtCG,EAFsC,KAE5BC,EAF4B,KA4B7C,OAxBAC,qBAAU,WACLP,GACDjB,EAAGyB,WAAW,cAAcC,IAAIT,GAAIQ,WAAW,YAAYE,QAAQ,YAAa,QAAQC,YAAW,SAAAC,GAAQ,OACzGN,EAAYM,EAASC,KAAKC,KAAI,SAACL,GAAD,OAC9BA,EAAIM,gBAGP,CAACf,IAEJO,qBAAU,WACRH,EAAQY,KAAKC,MAAsB,IAAhBD,KAAKE,aACvB,IAaKnB,EAWN,yBAAKoB,QAtBY,WACjB,IAAMC,EAAWC,OAAO,mCAEpBD,GAEFrC,EAAGyB,WAAW,cAAcc,IAAI,CAC9BrB,KAAMmB,KAgBgBG,UAAU,eAClC,6CAXF,kBAAC,IAAD,CAAMC,GAAE,iBAAYxB,IAClB,yBAAKuB,UAAU,eACb,kBAACE,EAAA,EAAD,CAAQC,IAAG,gDAA2CvB,EAA3C,UACX,yBAAKoB,UAAU,oBACb,4BAAKtB,GACL,qCAAII,EAAS,UAAb,aAAI,EAAasB,aCtCdC,EAAeC,0BAEfC,EAAgB,SAAC,GAAD,IAAGC,EAAH,EAAGA,QAASC,EAAZ,EAAYA,aAAcC,EAA1B,EAA0BA,SAA1B,OAC3B,kBAACL,EAAaM,SAAd,CAAuBC,MAAOC,qBAAWL,EAASC,IAC/CC,IAIQI,EAAgB,kBAAMC,qBAAWV,ICoD/BW,MAnDf,WAAoB,IAAD,EACSrC,mBAAS,IADlB,mBACVsC,EADU,KACHC,EADG,OAEYJ,IAFZ,mBAERK,EAFQ,KAERA,KAiBT,OAnBiB,KAIjBnC,qBAAU,WACR,IAAMoC,EAAc5D,EAAGyB,WAAW,cAAcG,YAAW,SAACC,GAAD,OACzD6B,EACE7B,EAASC,KAAKC,KAAI,SAACL,GAAD,MAAU,CAC1BT,GAAIS,EAAIT,GACRe,KAAMN,EAAIM,eAKhB,OAAO,WACL4B,OAED,IAGD,yBAAKpB,UAAU,WACb,yBAAKA,UAAU,kBACb,kBAACE,EAAA,EAAD,CAAQC,IAAG,OAAEgB,QAAF,IAAEA,OAAF,EAAEA,EAAME,WACnB,yBAAKrB,UAAU,gBACb,kBAACsB,EAAA,EAAD,KACE,kBAAC,IAAD,OAEF,kBAACA,EAAA,EAAD,KACE,kBAAC,IAAD,OAEF,kBAACA,EAAA,EAAD,KACE,kBAAC,IAAD,SAIN,yBAAKtB,UAAU,kBACb,yBAAKA,UAAU,2BACb,kBAACuB,EAAA,EAAD,MACA,2BAAOC,YAAY,2BAA2BC,KAAK,WAGvD,yBAAKzB,UAAU,iBACb,kBAAC,EAAD,CAAaxB,YAAU,IACtByC,EAAM1B,KAAI,SAACmC,GAAD,OACT,kBAAC,EAAD,CAAaC,IAAKD,EAAKjD,GAAIA,GAAIiD,EAAKjD,GAAIC,KAAMgD,EAAKlC,KAAKd,a,iDCuDnDkD,MAlGf,WAAiB,IAAD,MACUjD,mBAAS,IADnB,mBACPC,EADO,KACDC,EADC,OAEYF,mBAAS,IAFrB,mBAEPkD,EAFO,KAEAC,EAFA,KAGNC,EAAWC,cAAXD,OAHM,EAIkBpD,mBAAS,IAJ3B,mBAIPkB,EAJO,KAIGoC,EAJH,OAKkBtD,mBAAS,IAL3B,mBAKPG,EALO,KAKGC,EALH,OAMe+B,IANf,mBAMLK,EANK,KAMLA,KAuCT,OA7Cc,KAQdnC,qBAAU,WACJ+C,IACAvE,EAAGyB,WAAW,cACbC,IAAI6C,GACJ3C,YAAW,SAACC,GAAD,OAAc4C,EACzB5C,EAASG,OAAOd,SAEjBlB,EAAGyB,WAAW,cAAcC,IAAI6C,GAAQ9C,WAAW,YAAYE,QAAQ,YAAa,OAAOC,YAAW,SAACC,GAAD,OAClGN,EAAYM,EAASC,KAAKC,KAAI,SAACL,GAAD,OAC9BA,EAAIM,iBAGX,CAACuC,IAGJ/C,qBAAU,WACRH,EAAQY,KAAKC,MAAsB,IAAhBD,KAAKE,aACvB,CAACoC,IAqBF,yBAAK/B,UAAU,QACb,yBAAKA,UAAU,eACb,kBAACE,EAAA,EAAD,CAAQC,IAAG,gDAA2CvB,EAA3C,UAEX,yBAAKoB,UAAU,mBACb,4BAAKH,GACL,2BAAI,IAAIqC,KAAJ,UAASpD,EAASA,EAASqD,OAAS,UAApC,iBAAS,EAA+BC,iBAAxC,aAAS,EAA0CC,UAAUC,gBAGnE,yBAAKtC,UAAU,oBACb,kBAACsB,EAAA,EAAD,KACE,kBAAC,IAAD,OAEF,kBAACA,EAAA,EAAD,KACE,kBAAC,IAAD,OAEF,kBAACA,EAAA,EAAD,KACE,kBAAC,IAAD,SAKN,yBAAKtB,UAAU,aACVlB,EAASS,KAAI,SAAAa,GAAO,aACjB,uBAAGJ,UAAS,uBAAkBI,EAAQ1B,OAASyC,EAAKoB,aAAe,kBACnE,0BAAMvC,UAAU,aAAaI,EAAQ1B,MACpC0B,EAAQA,QACT,0BAAMJ,UAAU,kBAAkB,IAAIkC,KAAJ,UAAU9B,EAAQgC,iBAAlB,aAAU,EAAmBC,UAAUC,oBAMjF,yBAAKtC,UAAU,eACb,kBAACwC,EAAA,EAAD,MACA,8BACE,2BACE5B,MAAOiB,EACPY,SAzDW,SAACC,GAAO,IACnB9B,EAAU8B,EAAEC,OAAZ/B,MACRkB,EAASlB,IAwDDY,YAAY,iBACZC,KAAK,SAEP,4BAAQ7B,QAxDI,SAAC8C,GACnBA,EAAEE,iBACFC,QAAQC,IAAI,iBAAkBjB,GAE9BrE,EAAGyB,WAAW,cAAcC,IAAI6C,GAAQ9C,WAAW,YAAYc,IAAI,CAC/DK,QAASyB,EACTnD,KAAMyC,EAAKoB,YACXH,UAAW3E,IAASU,UAAU4E,WAAWC,oBAG7ClB,EAAS,KA8C2BL,KAAK,UAAnC,mBAIF,kBAAC,IAAD,S,iCCjGKwB,EACD,WAkBGzC,EAfC,SAAC0C,EAAOC,GAEtB,OADAN,QAAQC,IAAIK,GACJA,EAAO1B,MACb,KAAKwB,EAEH,OAAO,2BACFC,GADL,IAEE/B,KAAMgC,EAAOhC,OAGjB,QACE,OAAO+B,ICiBEE,MAhCf,WAAkB,IAAD,EACQtC,IADR,yCACJuC,EADI,KAef,OACE,yBAAKrD,UAAU,SACb,yBAAKA,UAAU,mBACb,yBACEG,IAAI,gGACJmD,IAAI,KAEN,yBAAKtD,UAAU,cACb,oDAGF,kBAACuD,EAAA,EAAD,CAAQ3D,QAvBC,WACbxB,EACGoF,gBAAgBnF,GAChBoF,MAAK,SAACC,GACLL,EAAS,CACP5B,KAAMwB,EACN9B,KAAMuC,EAAOvC,UAGhBwC,OAAM,SAACC,GAAD,OAAWC,MAAMD,EAAMxD,cAc5B,0BCEO0D,MA3Bf,WAAgB,IAAD,EACgBhD,IADhB,mBACJK,EADI,KACJA,KAET,OAHa,KAIX,yBAAKnB,UAAU,OACXmB,EAGA,yBAAKnB,UAAU,YACb,kBAAC,IAAD,KACE,kBAAC,EAAD,MACA,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAO+D,KAAK,iBAAiBC,OAAK,GAChC,kBAAC,EAAD,OAGF,kBAAC,IAAD,CAAOD,KAAK,KACV,kBAAC,EAAD,UAXR,kBAAC,EAAD,QCFYE,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCVNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,CAAe/D,aJVS,CAC1BU,KAAM,KACNsD,IAAK,KACLC,aAAc,EACdrD,SAAU,IIMmCb,QAASA,GAClD,kBAAC,EAAD,QAGJmE,SAASC,eAAe,SDqHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBtB,MAAK,SAACuB,GACLA,EAAaC,gBAEdtB,OAAM,SAACC,GACNf,QAAQe,MAAMA,EAAMxD,c","file":"static/js/main.007a8d7a.chunk.js","sourcesContent":["import firebase from \"firebase\";\n\nconst firebaseConfig = {\n  apiKey: \"AIzaSyDcrJpYbh2BpAHAXWvN3Kc2a6Q_oK0HVQI\",\n  authDomain: \"whatsapp-clone-6f0a4.firebaseapp.com\",\n  databaseURL: \"https://whatsapp-clone-6f0a4.firebaseio.com\",\n  projectId: \"whatsapp-clone-6f0a4\",\n  storageBucket: \"whatsapp-clone-6f0a4.appspot.com\",\n  messagingSenderId: \"184212487230\",\n  appId: \"1:184212487230:web:0f2d41aae541a7f14de56f\",\n  measurementId: \"G-S619WX3JZZ\",\n};\n\nconst firebaseApp = firebase.initializeApp(firebaseConfig);\nconst db = firebaseApp.firestore();\nconst auth = firebase.auth();\nconst provider = new firebase.auth.GoogleAuthProvider();\n\nexport { auth, provider };\nexport default db;\n","import React, { useState, useEffect } from \"react\";\nimport { Avatar } from \"@material-ui/core\";\nimport \"./SidebarChat.css\";\nimport db from \"./firebase\";\nimport { Link } from \"react-router-dom\";\n\nfunction SidebarChat({ addNewChat, id, name }) {\n  const [seed, setSeed] = useState(\"\");\n  const [messages, setMessages] = useState(\"\");\n\n  useEffect(() => {\n    if(id) {\n      db.collection('chat rooms').doc(id).collection(\"messages\").orderBy(\"timestamp\", \"desc\").onSnapshot(snapshot => (\n        setMessages(snapshot.docs.map((doc) => \n        doc.data()))\n      ))\n    }\n  }, [id])\n\n  useEffect(() => {\n    setSeed(Math.floor(Math.random() * 5000));\n  }, []);\n\n  const createChat = () => {\n    const roomName = prompt(\"Please enter name for chat room\");\n\n    if (roomName) {\n      //pull data from firestore\n      db.collection(\"chat rooms\").add({\n        name: roomName,\n      });\n    }\n  };\n\n  return !addNewChat ? (\n    <Link to={`/rooms/${id}`}>\n      <div className=\"sidebarChat\">\n        <Avatar src={`http://avatars.dicebear.com/api/human/${seed}.svg`} />\n        <div className=\"sidebarChat_info\">\n          <h2>{name}</h2>\n          <p>{messages[0]?.message}</p>\n        </div>\n      </div>\n    </Link>\n  ) : (\n    <div onClick={createChat} className=\"sidebarChat\">\n      <h2>Add new chat</h2>\n    </div>\n  );\n}\n\nexport default SidebarChat;\n","import React, { createContext, useContext, useReducer } from \"react\";\n\nexport const StateContext = createContext();\n\nexport const StateProvider = ({ reducer, initialState, children }) => (\n  <StateContext.Provider value={useReducer(reducer, initialState)}>\n    {children}\n  </StateContext.Provider>\n);\n\nexport const useStateValue = () => useContext(StateContext);\n","import React, { useState, useEffect } from \"react\";\nimport \"./Sidebar.css\";\nimport { Avatar, IconButton } from \"@material-ui/core\";\nimport DonutLargeIcon from \"@material-ui/icons/DonutLarge\";\nimport ChatIcon from \"@material-ui/icons/Chat\";\nimport MoreVertIcon from \"@material-ui/icons/MoreVert\";\nimport { SearchOutlined } from \"@material-ui/icons\";\nimport SidebarChat from \"./SidebarChat\";\nimport db from \"./firebase\";\nimport { useStateValue } from \"./StateProvider\";\n\nfunction Sidebar() {\n  const [rooms, setRooms] = useState([]);\n  const [{ user }, dispatch] = useStateValue();\n\n  useEffect(() => {\n    const unsubscribe = db.collection(\"chat rooms\").onSnapshot((snapshot) =>\n      setRooms(\n        snapshot.docs.map((doc) => ({\n          id: doc.id,\n          data: doc.data(),\n        }))\n      )\n    );\n    //clean up function to always detach real time listener\n    return () => {\n      unsubscribe();\n    };\n  }, []);\n\n  return (\n    <div className=\"sidebar\">\n      <div className=\"sidebar_header\">\n        <Avatar src={user?.photoURL} />\n        <div className=\"header_Right\">\n          <IconButton>\n            <DonutLargeIcon />\n          </IconButton>\n          <IconButton>\n            <ChatIcon />\n          </IconButton>\n          <IconButton>\n            <MoreVertIcon />\n          </IconButton>\n        </div>\n      </div>\n      <div className=\"sidebar_search\">\n        <div className=\"sidebar_searchContainer\">\n          <SearchOutlined />\n          <input placeholder=\"Search or start new chat\" type=\"text\" />\n        </div>\n      </div>\n      <div className=\"sidebar_chats\">\n        <SidebarChat addNewChat />\n        {rooms.map((room) => (\n          <SidebarChat key={room.id} id={room.id} name={room.data.name} />\n        ))}\n      </div>\n    </div>\n  );\n}\n\nexport default Sidebar;\n","import React, { useState, useEffect } from \"react\";\nimport \"./Chat.css\";\nimport { Avatar, IconButton } from \"@material-ui/core\";\nimport DonutLargeIcon from \"@material-ui/icons/DonutLarge\";\nimport ChatIcon from \"@material-ui/icons/Chat\";\nimport { MoreVert, InsertEmoticon } from \"@material-ui/icons\";\nimport MicIcon from \"@material-ui/icons/Mic\";\nimport { useParams } from 'react-router-dom'\nimport db from './firebase'\nimport firebase from 'firebase'\nimport { useStateValue } from './StateProvider'\n\nfunction Chat() {\n  const [seed, setSeed] = useState(\"\");\n  const [input, setInput] = useState(\"\");\n  const { roomId } = useParams()\n  const [roomName, setRoomName] = useState('');\n  const [messages, setMessages] = useState([])\n  const [{ user }, dispatch] = useStateValue();\n\n  useEffect(() => {\n    if (roomId) {\n        db.collection(\"chat rooms\")\n        .doc(roomId)\n        .onSnapshot((snapshot) => setRoomName\n        (snapshot.data().name))\n\n        db.collection(\"chat rooms\").doc(roomId).collection(\"messages\").orderBy(\"timestamp\", \"asc\").onSnapshot((snapshot) => \n            setMessages(snapshot.docs.map((doc) => \n            doc.data()))\n        )}\n      \n  }, [roomId]);\n  \n  //to make room avatar change whenever user clicks a diff room\n  useEffect(() => {\n    setSeed(Math.floor(Math.random() * 5000));\n  }, [roomId]);\n\n  const handleChange = (e) => {\n    const { value } = e.target;\n    setInput(value);\n  };\n\n  const sendMessage = (e) => {\n    e.preventDefault();\n    console.log(\"You type >>>> \", input);\n\n    db.collection(\"chat rooms\").doc(roomId).collection(\"messages\").add({\n        message: input,\n        name: user.displayName,\n        timestamp: firebase.firestore.FieldValue.serverTimestamp(),\n    })\n\n    setInput(\"\");\n  };\n\n  return (\n    <div className=\"chat\">\n      <div className=\"chat_header\">\n        <Avatar src={`http://avatars.dicebear.com/api/human/${seed}.svg`} />\n\n        <div className=\"chat_headerInfo\">\n          <h3>{roomName}</h3>\n          <p>{new Date(messages[messages.length - 1]?.timestamp?.toDate()).toUTCString()}</p>\n        </div>\n\n        <div className=\"chat_headerRight\">\n          <IconButton>\n            <DonutLargeIcon />\n          </IconButton>\n          <IconButton>\n            <ChatIcon />\n          </IconButton>\n          <IconButton>\n            <MoreVert />\n          </IconButton>\n        </div>\n      </div>\n\n      <div className=\"chat_body\">\n          {messages.map(message => (\n              <p className={`chat_message ${message.name === user.displayName && \"chat_receiver\"}`}>\n              <span className=\"chat_name\">{message.name}</span>\n              {message.message}\n              <span className=\"chat_timestamp\">{new Date (message.timestamp?.toDate()).toUTCString()}</span>\n            </p>\n          ))}\n        \n      </div>\n\n      <div className=\"chat_footer\">\n        <InsertEmoticon />\n        <form>\n          <input\n            value={input}\n            onChange={handleChange}\n            placeholder=\"Type a message\"\n            type=\"text\"\n          />\n          <button onClick={sendMessage} type=\"submit\">\n            Send a message\n          </button>\n        </form>\n        <MicIcon />\n      </div>\n    </div>\n  );\n}\n\nexport default Chat;\n","export const initialState = {\n  user: null,\n  uid: null,\n  togglerState: 1,\n  photoURL: \"\",\n};\n\nexport const actionTypes = {\n  SET_USER: \"SET_USER\",\n};\n\nconst reducer = (state, action) => {\n  console.log(action);\n  switch (action.type) {\n    case actionTypes.SET_USER:\n      //  console.log(action);\n      return {\n        ...state,\n        user: action.user,\n      };\n\n    default:\n      return state;\n  }\n};\n\nexport default reducer;\n","import React from \"react\";\nimport \"./Login.css\";\nimport { Button } from \"@material-ui/core\";\nimport { auth, provider } from \"./firebase\";\nimport { useStateValue } from \"./StateProvider\";\nimport { actionTypes } from \"./reducer\";\n\nfunction Login() {\n  const [{}, dispatch] = useStateValue();\n\n  const signIn = () => {\n    auth\n      .signInWithPopup(provider)\n      .then((result) => {\n        dispatch({\n          type: actionTypes.SET_USER,\n          user: result.user,\n        });\n      })\n      .catch((error) => alert(error.message));\n  };\n\n  return (\n    <div className=\"login\">\n      <div className=\"login_container\">\n        <img\n          src=\"https://upload.wikimedia.org/wikipedia/commons/thumb/6/6b/WhatsApp.svg/479px-WhatsApp.svg.png\"\n          alt=\"\"\n        />\n        <div className=\"login_text\">\n          <h1>Sign in to WhatsApp</h1>\n        </div>\n\n        <Button onClick={signIn}>Sign in With Google</Button>\n      </div>\n    </div>\n  );\n}\n\nexport default Login;\n","import React from \"react\";\nimport \"./App.css\";\nimport Sidebar from \"./Sidebar\";\nimport Chat from \"./Chat\";\nimport { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\nimport Login from \"./Login\";\nimport { useStateValue } from \"./StateProvider\";\n\nfunction App() {\n  const [{ user }, dispatch] = useStateValue();\n\n  return (\n    <div className=\"app\">\n      {!user ? (\n        <Login />\n      ) : (\n        <div className=\"app_body\">\n          <Router>\n            <Sidebar />\n            <Switch>\n              <Route path=\"/rooms/:roomId\" exact>\n                <Chat />\n              </Route>\n\n              <Route path=\"/\">\n                <Chat />\n              </Route>\n            </Switch>\n          </Router>\n        </div>\n      )}\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit https://bit.ly/CRA-PWA\"\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                \"New content is available and will be used when all \" +\n                  \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\"\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\");\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { \"Service-Worker\": \"script\" },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get(\"content-type\");\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\"\n      );\n    });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport reducer, { initialState } from \"./reducer\";\nimport { StateProvider } from \"./StateProvider\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <StateProvider initialState={initialState} reducer={reducer}>\n      <App />\n    </StateProvider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}